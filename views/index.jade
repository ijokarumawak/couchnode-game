extends layout

block content
  h1= title
  if typeof(user) === 'undefined'
    p Welcome to #{title}
    form(action='/login', method='POST')
      label(for='id') ID: 
      input(name='id', type='text')
      label(for='password') Password: 
      input(name='password', type='password')
      button(type='submit') login
    p or
    a(href='/register') register
  else
    div
      span Welcome back!!
       b #{user.id}
      span  | 
      a(href='/logout') logout
      script(src='/javascripts/socket.io.js')
    script
      var socket = io.connect('http://192.168.1.167');
      var battle;
      socket.on('news', function (data) {
        showMessages(data);
      });
      socket.on('updateBattle', function(battle) {
        updateBattle(battle);
      });

      function startBattle(userID) {
        $('#messages').text(' ');
        var data = {userID: userID};
        if(battle) data.oldBattleID = battle.id;
        socket.emit('startBattle', data);
      }

      function joinBattle(userID, friendID) {
        $('#messages').text(' ');
        var data = {userID: userID, friendID: friendID};
        if(battle) data.oldBattleID = battle.id;
        socket.emit('joinBattle', data);
      }

      function sendMessage(message) {
        console.log('sending message:' + message + ' to:' + battle.id);
        if(message)
          socket.emit('sendMessage', {battleID: battle.id, userID: '#{user.id}', message: message});
      }

      function showMessages(messages) {
        if(!messages) return;
        if(!messages.forEach) messages = [messages];
        var timeout = 0;
        messages.forEach(function(message){
          setTimeout(function(){
            $('#messages').prepend('<p>' + message + '</p>');
          }, timeout);
          timeout += 500;
        });
      }

      function attack(monsterID) {
        socket.emit('attack',
          {attackerID: '#{user.id}', battleID: battle.id, attackeeID: monsterID});
      }

      function updateBattle(_battle) {
        battle = _battle;
        console.log('battle=' + JSON.stringify(battle));
        var headers = ['name', 'level', 'HP', 'ATK', 'Command'];
        var html = "<div id='battle'><h2>" + battle.id + "</h2><table><tr>";
        headers.forEach(function(header){
          html += '<th>' + header + '</th>';
        });
        for(key in battle.users) {
          var user = battle.users[key];
          html += '</tr><tr><td>' + user.id + '</td>'
          + '<td>' + user.level + '</td>'
          + '<td>' + user.hp + '</td>'
          + '<td>' + user.atk + '</td><td>-</td>';
        };
        for(key in battle.monsters) {
          var monster = battle.monsters[key];
          html += '</tr><tr><td>' + monster.name + '</td>'
          + '<td>' + monster.level + '</td>'
          + '<td>' + monster.hp + '</td>'
          + '<td>' + monster.atk + '</td>';
          if(monster.hp > 0 && battle.users['#{user.id}'].hp > 0)
           html += '<td><button onclick="attack(\'' + monster.id + '\')">attack!</button></td>';
          else html += '<td>-</td>';
        };
        html += '</tr></table></div>'
        $('#battle').replaceWith(html);

        if(battle.result) {
          $('.controls').show();
          $('.controls-fighting').hide();
          $('#result').text(battle.result);
        } else {
          $('.controls').hide();
          $('.controls-fighting').show();
          $('#result').text(' ');
        };
      }

    div(class='controls-fighting', style='display: none')
      label Message:
      input#chatMessage(type='text')
      button(onclick="sendMessage($('#chatMessage').val())") Send

    div(class='controls')
      button(onclick="startBattle('#{user.id}')") Start Battle!
      div
        label Friend's ID:
        input#friendID(type='text')
        button(onclick="joinBattle('#{user.id}', $('#friendID').val())") Join Battle!

    h1#result
    div#battle
    div#messages
    if user.battleID
      script
        // Re-join the battle when the browser page is reloaded.
        socket.emit('rejoinBattle', {battleID: '#{user.battleID}', userID: '#{user.id}'});


